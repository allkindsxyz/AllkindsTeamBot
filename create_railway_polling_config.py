#!/usr/bin/env python3
"""
Railway Polling Configuration Generator

This script creates/updates railway.toml to force polling mode by:
1. Setting USE_WEBHOOK=false
2. Optimizing other Railway-specific settings
"""

import os
import sys
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Railway config file
RAILWAY_CONFIG = "railway.toml"

def create_railway_config():
    """Create or update the Railway config file."""
    
    config_content = """# Railway Configuration
# Generated by create_railway_polling_config.py at {timestamp}

[build]
builder = "nixpacks"
buildCommand = "pip install -r requirements.txt"

[deploy]
startCommand = "python -m src.main"
healthcheckPath = "/health"
healthcheckTimeout = 10
restartPolicyType = "on-failure"
restartPolicyMaxRetries = 5

[environments]
  # Production environment
  [environments.production]
    # Force polling mode
    USE_WEBHOOK = "false"
    # Optimize worker settings
    numReplicas = 1
    
    # Health check settings
    healthcheckPath = "/health"
    healthcheckTimeout = 10
    
    # Optimize for Railway
    PORT = "8080"
    
    # Bot settings
    # You need to provide valid tokens in Railway dashboard
    # BOT_TOKEN = "YOUR_MAIN_BOT_TOKEN"
    # COMMUNICATOR_BOT_TOKEN = "YOUR_COMMUNICATOR_BOT_TOKEN"
    # Communicator bot username (without @)
    COMMUNICATOR_BOT_USERNAME = "AllkindsChatBot"
    
    # Optional settings for debugging 
    LOG_LEVEL = "INFO"
    
  # Preview environment (for testing)
  [environments.preview]
    # Force polling mode
    USE_WEBHOOK = "false"
    
    # Health check settings
    healthcheckPath = "/health"
    healthcheckTimeout = 10
    
    # Optimize for Railway
    PORT = "8080"
    
    # Bot settings
    # You need to provide valid tokens in Railway dashboard
    # BOT_TOKEN = "YOUR_MAIN_BOT_TOKEN"
    # COMMUNICATOR_BOT_TOKEN = "YOUR_COMMUNICATOR_BOT_TOKEN"
    # Communicator bot username (without @)
    COMMUNICATOR_BOT_USERNAME = "AllkindsChatBot"
    
    # Development settings
    LOG_LEVEL = "DEBUG"
""".format(timestamp=datetime.now().isoformat())
    
    try:
        # Make a backup if the file exists
        if os.path.exists(RAILWAY_CONFIG):
            backup_path = f"{RAILWAY_CONFIG}.bak_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.rename(RAILWAY_CONFIG, backup_path)
            logger.info(f"Created backup of existing config: {backup_path}")
        
        # Write the new config
        with open(RAILWAY_CONFIG, "w") as f:
            f.write(config_content)
        
        logger.info(f"Created new Railway configuration file: {RAILWAY_CONFIG}")
        return True
    except Exception as e:
        logger.error(f"Error creating Railway config: {e}")
        return False

def main():
    """Main entry point for the script."""
    logger.info("Creating Railway polling configuration...")
    
    # Create the railway.toml file
    success = create_railway_config()
    
    if success:
        logger.info("=== RAILWAY POLLING CONFIGURATION CREATED ===")
        logger.info("Next steps:")
        logger.info("1. Commit and push your changes to your repository")
        logger.info("2. In Railway dashboard, ensure your environment variables are set")
        logger.info("   - Add your bot tokens if needed")
        logger.info("3. Trigger a new deployment in Railway")
        logger.info("")
        logger.info("Your bot should now operate in polling mode on Railway")
        return 0
    else:
        logger.error("Failed to create Railway configuration")
        return 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        logger.info("Interrupted by user")
        sys.exit(0)
    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 